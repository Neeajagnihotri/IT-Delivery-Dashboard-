
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { FileText, Search, Eye, Plus, Calendar, User, Wand2, CheckCircle } from "lucide-react";

const mockGeneratedLetters = [
  {
    id: 1,
    type: "Offer Letter",
    employeeName: "John Smith",
    employeeId: "EMP001",
    generatedDate: "2024-01-15",
    status: "Generated",
    position: "Senior Developer",
    autoGenerated: true
  },
  {
    id: 2,
    type: "Employment Contract",
    employeeName: "Sarah Wilson",
    employeeId: "EMP045",
    generatedDate: "2024-01-20",
    status: "Draft",
    position: "UX Designer",
    autoGenerated: false
  },
  {
    id: 3,
    type: "Appraisal Letter",
    employeeName: "Mike Johnson",
    employeeId: "EMP089",
    generatedDate: "2024-01-25",
    status: "Generated",
    position: "QA Engineer",
    autoGenerated: true
  },
  {
    id: 4,
    type: "Promotion Letter",
    employeeName: "Lisa Chen",
    employeeId: "EMP134",
    generatedDate: "2024-02-01",
    status: "Generated",
    position: "Marketing Lead",
    autoGenerated: true
  }
];

const letterTemplates = {
  offer: {
    title: "Offer Letter",
    fields: ["salary", "startDate", "benefits", "reportingManager"],
    template: "We are pleased to offer you the position of {position} at Zapcom IT Solutions..."
  },
  employment: {
    title: "Employment Contract",
    fields: ["contractType", "duration", "terms", "probationPeriod"],
    template: "This Employment Contract is entered into between Zapcom IT Solutions and {employeeName}..."
  },
  appraisal: {
    title: "Appraisal Letter",
    fields: ["performanceRating", "achievements", "goals", "salaryRevision"],
    template: "Based on your performance review for the period, we are pleased to inform you..."
  },
  promotion: {
    title: "Promotion Letter",
    fields: ["newPosition", "effectiveDate", "newSalary", "responsibilities"],
    template: "We are delighted to inform you of your promotion to {newPosition}..."
  }
};

export const LetterAutomation = () => {
  const [isGenerateModalOpen, setIsGenerateModalOpen] = useState(false);
  const [isAutoGenerating, setIsAutoGenerating] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedLetterType, setSelectedLetterType] = useState('');
  const [letters, setLetters] = useState(mockGeneratedLetters);
  const [newLetter, setNewLetter] = useState({
    type: '',
    employee: '',
    position: '',
    details: '',
    autoGenerate: false
  });

  const filteredLetters = letters.filter(letter => {
    const matchesSearch = letter.employeeName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         letter.employeeId.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         letter.type.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesType = !selectedLetterType || letter.type === selectedLetterType;
    return matchesSearch && matchesType;
  });

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Generated':
        return 'bg-teal text-white';
      case 'Draft':
        return 'bg-charcoal text-white';
      default:
        return 'bg-slate text-white';
    }
  };

  const handleAutoGenerate = async () => {
    if (!newLetter.type || !newLetter.employee || !newLetter.position) {
      alert('Please fill in all required fields');
      return;
    }

    setIsAutoGenerating(true);
    
    // Simulate AI-powered letter generation
    setTimeout(() => {
      const letterTypeKey = newLetter.type as keyof typeof letterTemplates;
      const template = letterTemplates[letterTypeKey];
      
      const newLetterEntry = {
        id: letters.length + 1,
        type: template.title,
        employeeName: newLetter.employee.split(' (')[0],
        employeeId: newLetter.employee.split('(')[1]?.replace(')', '') || 'EMP000',
        generatedDate: new Date().toISOString().split('T')[0],
        status: 'Generated',
        position: newLetter.position,
        autoGenerated: true
      };
      
      setLetters([...letters, newLetterEntry]);
      setIsAutoGenerating(false);
      setIsGenerateModalOpen(false);
      setNewLetter({ type: '', employee: '', position: '', details: '', autoGenerate: false });
      
      alert(`✅ ${template.title} has been automatically generated for ${newLetter.employee.split(' (')[0]}`);
    }, 3000);
  };

  const handleManualGenerate = () => {
    if (!newLetter.type || !newLetter.employee || !newLetter.position) {
      alert('Please fill in all required fields');
      return;
    }

    const letterTypeKey = newLetter.type as keyof typeof letterTemplates;
    const template = letterTemplates[letterTypeKey];
    
    const newLetterEntry = {
      id: letters.length + 1,
      type: template.title,
      employeeName: newLetter.employee.split(' (')[0],
      employeeId: newLetter.employee.split('(')[1]?.replace(')', '') || 'EMP000',
      generatedDate: new Date().toISOString().split('T')[0],
      status: 'Draft',
      position: newLetter.position,
      autoGenerated: false
    };
    
    setLetters([...letters, newLetterEntry]);
    setIsGenerateModalOpen(false);
    setNewLetter({ type: '', employee: '', position: '', details: '', autoGenerate: false });
    
    alert(`📝 ${template.title} draft created for ${newLetter.employee.split(' (')[0]}`);
  };

  const handleViewLetter = (letterId: number) => {
    const letter = letters.find(l => l.id === letterId);
    console.log('Viewing letter:', letter);
    
    // Simulate opening letter in a new window/modal
    const letterContent = `
      ${letter?.type}
      
      Employee: ${letter?.employeeName} (${letter?.employeeId})
      Position: ${letter?.position}
      Generated: ${letter?.generatedDate}
      Status: ${letter?.status}
      
      ${letter?.autoGenerated ? 'This letter was automatically generated using AI.' : 'This is a manual draft.'}
    `;
    
    alert(letterContent);
  };

  const handleBulkGenerate = () => {
    const employeesToProcess = [
      { name: "Alex Rodriguez", id: "EMP200", position: "Data Analyst", type: "offer" },
      { name: "Emma Thompson", id: "EMP201", position: "Project Manager", type: "employment" },
      { name: "David Kim", id: "EMP202", position: "Senior Developer", type: "appraisal" }
    ];

    setIsAutoGenerating(true);
    
    setTimeout(() => {
      const newBulkLetters = employeesToProcess.map((emp, index) => ({
        id: letters.length + index + 1,
        type: letterTemplates[emp.type as keyof typeof letterTemplates].title,
        employeeName: emp.name,
        employeeId: emp.id,
        generatedDate: new Date().toISOString().split('T')[0],
        status: 'Generated',
        position: emp.position,
        autoGenerated: true
      }));
      
      setLetters([...letters, ...newBulkLetters]);
      setIsAutoGenerating(false);
      alert(`✅ Bulk generated ${employeesToProcess.length} letters successfully!`);
    }, 4000);
  };

  return (
    <div className="space-y-4 md:space-y-6">
      {/* Header and Controls */}
      <Card className="bg-white border border-deep-blue/20">
        <CardHeader className="p-4 md:p-6">
          <CardTitle className="text-deep-blue text-lg md:text-xl">HR Letter Automation</CardTitle>
        </CardHeader>
        <CardContent className="p-4 md:p-6">
          <div className="flex flex-col lg:flex-row gap-4 mb-6">
            <Dialog open={isGenerateModalOpen} onOpenChange={setIsGenerateModalOpen}>
              <DialogTrigger asChild>
                <Button className="bg-deep-blue hover:bg-deep-blue/90 w-full sm:w-auto">
                  <Plus className="h-4 w-4 mr-2" />
                  Generate New Letter
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-2xl mx-4">
                <DialogHeader>
                  <DialogTitle className="text-deep-blue">Generate HR Letter</DialogTitle>
                </DialogHeader>
                <div className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-deep-blue mb-2">Letter Type</label>
                      <Select value={newLetter.type} onValueChange={(value) => setNewLetter({...newLetter, type: value})}>
                        <SelectTrigger className="bg-white border-soft-silver/40 focus:border-teal">
                          <SelectValue placeholder="Select letter type" />
                        </SelectTrigger>
                        <SelectContent className="bg-white border border-soft-silver/40">
                          <SelectItem value="offer">Offer Letter</SelectItem>
                          <SelectItem value="employment">Employment Contract</SelectItem>
                          <SelectItem value="appraisal">Appraisal Letter</SelectItem>
                          <SelectItem value="promotion">Promotion Letter</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-deep-blue mb-2">Employee</label>
                      <Select value={newLetter.employee} onValueChange={(value) => setNewLetter({...newLetter, employee: value})}>
                        <SelectTrigger className="bg-white border-soft-silver/40 focus:border-teal">
                          <SelectValue placeholder="Select employee" />
                        </SelectTrigger>
                        <SelectContent className="bg-white border border-soft-silver/40">
                          <SelectItem value="John Smith (EMP001)">John Smith (EMP001)</SelectItem>
                          <SelectItem value="Sarah Wilson (EMP045)">Sarah Wilson (EMP045)</SelectItem>
                          <SelectItem value="Mike Johnson (EMP089)">Mike Johnson (EMP089)</SelectItem>
                          <SelectItem value="Lisa Chen (EMP134)">Lisa Chen (EMP134)</SelectItem>
                          <SelectItem value="Alex Rodriguez (EMP200)">Alex Rodriguez (EMP200)</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-deep-blue mb-2">Position/Role</label>
                    <Input 
                      placeholder="Enter position or role" 
                      className="bg-white border-soft-silver/40 focus:border-teal" 
                      value={newLetter.position}
                      onChange={(e) => setNewLetter({...newLetter, position: e.target.value})}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-deep-blue mb-2">Additional Details</label>
                    <Textarea 
                      placeholder="Enter any additional details for the letter"
                      className="bg-white border-soft-silver/40 focus:border-teal"
                      rows={3}
                      value={newLetter.details}
                      onChange={(e) => setNewLetter({...newLetter, details: e.target.value})}
                    />
                  </div>
                  <div className="flex flex-col sm:flex-row justify-end gap-3">
                    <Button 
                      variant="outline" 
                      onClick={() => setIsGenerateModalOpen(false)} 
                      className="border-slate text-slate hover:bg-slate hover:text-white"
                      disabled={isAutoGenerating}
                    >
                      Cancel
                    </Button>
                    <Button 
                      onClick={handleManualGenerate} 
                      className="bg-charcoal hover:bg-charcoal/90"
                      disabled={isAutoGenerating}
                    >
                      Create Draft
                    </Button>
                    <Button 
                      onClick={handleAutoGenerate} 
                      className="bg-teal hover:bg-teal/90"
                      disabled={isAutoGenerating}
                    >
                      {isAutoGenerating ? (
                        <>
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                          Generating...
                        </>
                      ) : (
                        <>
                          <Wand2 className="h-4 w-4 mr-2" />
                          Auto Generate
                        </>
                      )}
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
            
            <Button 
              onClick={handleBulkGenerate} 
              className="bg-teal hover:bg-teal/90 w-full sm:w-auto"
              disabled={isAutoGenerating}
            >
              {isAutoGenerating ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  Processing...
                </>
              ) : (
                <>
                  <CheckCircle className="h-4 w-4 mr-2" />
                  Bulk Generate
                </>
              )}
            </Button>
          </div>

          {/* Statistics */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-3 md:gap-4 mb-6">
            <div className="bg-light-bg p-3 md:p-4 rounded-lg border border-soft-silver/30">
              <div className="flex items-center gap-2 md:gap-3">
                <div className="p-1.5 md:p-2 bg-deep-blue rounded-lg">
                  <FileText className="h-4 w-4 md:h-5 md:w-5 text-white" />
                </div>
                <div>
                  <p className="text-xs md:text-sm text-slate">Total Letters</p>
                  <p className="text-lg md:text-xl font-bold text-deep-blue">{letters.length}</p>
                </div>
              </div>
            </div>
            <div className="bg-light-bg p-3 md:p-4 rounded-lg border border-soft-silver/30">
              <div className="flex items-center gap-2 md:gap-3">
                <div className="p-1.5 md:p-2 bg-teal rounded-lg">
                  <Wand2 className="h-4 w-4 md:h-5 md:w-5 text-white" />
                </div>
                <div>
                  <p className="text-xs md:text-sm text-slate">Auto Generated</p>
                  <p className="text-lg md:text-xl font-bold text-teal">{letters.filter(l => l.autoGenerated).length}</p>
                </div>
              </div>
            </div>
            <div className="bg-light-bg p-3 md:p-4 rounded-lg border border-soft-silver/30">
              <div className="flex items-center gap-2 md:gap-3">
                <div className="p-1.5 md:p-2 bg-charcoal rounded-lg">
                  <FileText className="h-4 w-4 md:h-5 md:w-5 text-white" />
                </div>
                <div>
                  <p className="text-xs md:text-sm text-slate">Drafts</p>
                  <p className="text-lg md:text-xl font-bold text-charcoal">{letters.filter(l => l.status === 'Draft').length}</p>
                </div>
              </div>
            </div>
            <div className="bg-light-bg p-3 md:p-4 rounded-lg border border-soft-silver/30">
              <div className="flex items-center gap-2 md:gap-3">
                <div className="p-1.5 md:p-2 bg-slate rounded-lg">
                  <CheckCircle className="h-4 w-4 md:h-5 md:w-5 text-white" />
                </div>
                <div>
                  <p className="text-xs md:text-sm text-slate">Generated</p>
                  <p className="text-lg md:text-xl font-bold text-slate">{letters.filter(l => l.status === 'Generated').length}</p>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Generated Letters with Search */}
      <Card className="bg-white border border-deep-blue/20">
        <CardHeader className="p-4 md:p-6">
          <CardTitle className="text-deep-blue text-lg md:text-xl">Generated Letters</CardTitle>
        </CardHeader>
        <CardContent className="p-4 md:p-6">
          {/* Search and Filter Controls */}
          <div className="flex flex-col md:flex-row gap-4 mb-6">
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-3 h-4 w-4 text-slate" />
              <Input
                placeholder="Search by employee name, ID, or letter type..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 bg-white border-soft-silver/40 focus:border-teal"
              />
            </div>
            <Select value={selectedLetterType} onValueChange={setSelectedLetterType}>
              <SelectTrigger className="w-full md:w-48 bg-white border-soft-silver/40 focus:border-teal">
                <SelectValue placeholder="Filter by type" />
              </SelectTrigger>
              <SelectContent className="bg-white border border-soft-silver/40">
                <SelectItem value="all">All Types</SelectItem>
                <SelectItem value="Offer Letter">Offer Letter</SelectItem>
                <SelectItem value="Employment Contract">Employment Contract</SelectItem>
                <SelectItem value="Appraisal Letter">Appraisal Letter</SelectItem>
                <SelectItem value="Promotion Letter">Promotion Letter</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Letters List */}
          <div className="space-y-3">
            {filteredLetters.map((letter) => (
              <Card key={letter.id} className="border border-soft-silver/30 hover:border-teal/40 transition-colors">
                <CardContent className="p-3 md:p-4">
                  <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
                    <div className="flex items-center gap-3 md:gap-4">
                      <div className="p-2 bg-light-bg rounded-lg">
                        <FileText className="h-4 w-4 md:h-5 md:w-5 text-deep-blue" />
                      </div>
                      <div>
                        <div className="flex items-center gap-2">
                          <h4 className="font-semibold text-deep-blue text-sm md:text-base">{letter.type}</h4>
                          {letter.autoGenerated && (
                            <Badge className="bg-teal text-white text-xs">
                              <Wand2 className="h-3 w-3 mr-1" />
                              AI Generated
                            </Badge>
                          )}
                        </div>
                        <div className="flex flex-col md:flex-row md:items-center gap-2 md:gap-4 text-xs md:text-sm text-slate mt-1">
                          <div className="flex items-center gap-1">
                            <User className="h-3 w-3" />
                            <span>{letter.employeeName} ({letter.employeeId})</span>
                          </div>
                          <div className="flex items-center gap-1">
                            <Calendar className="h-3 w-3" />
                            <span>{letter.generatedDate}</span>
                          </div>
                        </div>
                        <p className="text-xs md:text-sm text-slate mt-1">Position: {letter.position}</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-3">
                      <Badge className={getStatusColor(letter.status)}>
                        {letter.status}
                      </Badge>
                      <Button 
                        variant="outline" 
                        size="sm" 
                        className="border-deep-blue text-deep-blue hover:bg-deep-blue hover:text-white"
                        onClick={() => handleViewLetter(letter.id)}
                      >
                        <Eye className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
